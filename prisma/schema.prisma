// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRoles {
  ADMIN
  MANAGER
  STAFF

  VENDOR
  CUSTOMER
  GUEST
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String    @unique
  password  String
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  role      UserRoles @default(GUEST)
  products  Product[]
  orders    Order[]
  reviews   Review[]
  addresses Address[]

  @@index([role])
}

model Address {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  street      String
  city        String
  state       String
  postalCode  String
  country     String
  createdAt   DateTime   @default(now())

  userId      String     @db.ObjectId
  user        User       @relation(fields: [userId], references: [id])
}

enum ProductSize {
  XS
  S
  M
  L
  XL
}

model Product {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Float
  size        ProductSize
  color       String
  stock       Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  userId      String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])

  categoryId  String    @db.ObjectId
  category    Category  @relation(fields: [categoryId], references: [id])
  
  reviews     Review[]
  orderItems  OrderItem[]

  @@index([name])
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Order {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  totalAmount Float
  status      OrderStatus @default(PENDING)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  userId      String     @db.ObjectId
  user        User       @relation(fields: [userId], references: [id])
  
  orderItems  OrderItem[]

  @@index([status])
}

model OrderItem {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  quantity    Int
  price       Float

  orderId     String     @db.ObjectId
  order       Order      @relation(fields: [orderId], references: [id])

  productId   String     @db.ObjectId
  product     Product    @relation(fields: [productId], references: [id])
}

model Review {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  rating      Int
  comment     String?
  createdAt   DateTime   @default(now())

  userId      String     @db.ObjectId
  user        User       @relation(fields: [userId], references: [id])

  productId   String     @db.ObjectId
  product     Product    @relation(fields: [productId], references: [id])
}

model Category {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  createdAt   DateTime   @default(now())

  products    Product[]
}
